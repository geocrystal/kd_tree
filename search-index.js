crystal_doc_search_index_callback({"repository_name":"kd_tree","body":"# Kd::Tree\n\n[![Crystal CI](https://github.com/geocrystal/kd_tree/actions/workflows/crystal.yml/badge.svg)](https://github.com/geocrystal/kd_tree/actions/workflows/crystal.yml)\n[![GitHub release](https://img.shields.io/github/release/geocrystal/kd_tree.svg)](https://github.com/geocrystal/kd_tree/releases)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://geocrystal.github.io/kd_tree/)\n[![License](https://img.shields.io/github/license/geocrystal/kd_tree.svg)](https://github.com/geocrystal/kd_tree/blob/master/LICENSE)\n\nCrystal implementation of \"K-Dimensional Tree\" and \"N-Nearest Neighbors\"\nbased on <http://en.wikipedia.org/wiki/Kd-tree>.\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  kd_tree:\n    github: geocrystal/kd_tree\n```\n\n## Usage\n\n```crystal\nrequire \"kd_tree\"\n```\n\nFor example, construct a new tree where each point is represented as a two-dimensional array in the form [x, y], where x and y are numbers (such as Int32, Float64, etc).\n\n```crystal\nkd = Kd::Tree(Array(Int32)).new(points)\n```\n\nFind the nearest point to `[x, y]`. Returns an array with one point:\n\n```crystal\nkd.nearest([x, y])\n```\n\nFind the nearest `k` points to `[x, y]`. Returns an array of points:\n\n```crystal\nkd.nearest([x, y], k)\n```\n\n## Example\n\n```crystal\nrequire \"kd_tree\"\n\npoints = [\n  [2.0, 3.0],\n  [5.0, 4.0],\n  [4.0, 7.0],\n  [7.0, 2.0],\n  [8.0, 1.0],\n  [9.0, 6.0],\n]\n\nkd = Kd::Tree(Array(Float64)).new(points)\n\nkd.nearest([1.0, 1.0])\n# => [[2.0, 3.0]])\n\nkd_tree.nearest([1.0, 1.0], 2)\n# => [[2.0, 3.0], [5.0, 4.0]])\n```\n\n### Complex objects\n\n`Kd::Tree(T)` can accept any object that responds to `#size` and `#[](i : Int)` methods.\n\n```crystal\nclass GeoLocation\n  property name : String\n  property longitude : Float64\n  property latitude : Float64\n  getter size = 2 # Assuming all GeoLocation objects are 2-dimensional\n\n  def initialize(@name : String, @longitude : Float64, @latitude : Float64)\n  end\n\n  # Define an indexer to allow easy access by index for longitude and latitude\n  def [](index : Int32) : Float64\n    case index\n    when 0 then @longitude\n    when 1 then @latitude\n    else        raise \"Index out of bounds\"\n    end\n  end\nend\n\n# Create an array of GeoLocation points\npoints = [\n  GeoLocation.new(\"New York\", -73.935242, 40.730610),\n  GeoLocation.new(\"Los Angeles\", -118.243683, 34.052235),\n  GeoLocation.new(\"London\", -0.127647, 51.507322),\n  GeoLocation.new(\"Tokyo\", 139.691711, 35.689487),\n]\n\n# Initialize the KD-tree with these points\nkd_tree = Kd::Tree(GeoLocation).new(points)\n\n# Find the nearest point to London\ntarget = GeoLocation.new(\"Near London\", -0.125740, 51.508530)\nnearest_point = kd_tree.nearest(target, 1)\nputs \"Nearest to London: #{nearest_point.first.name} (longitude #{nearest_point.first.longitude}, latitude #{nearest_point.first.latitude})\"\n# Nearest to London: London (longitude -0.127647, latitude 51.507322)\n```\n\n### Distance\n\nFor distance calculations, the squared Euclidean distance is used. However, you can easily monkey-patch the `Kd::Tree#distance` method to implement another algorithm, such as the Haversine formula, to calculate distances between two points given their latitudes and longitudes.\n\n```crystal\nrequire \"haversine\"\n\nmodule Kd\n  class Tree(T)\n    private def distance(m : T, n : T)\n      # Calling `Haversine.distance` with 2 pairs of latitude/longitude coordinates.\n      # Returns a distance in meters.\n      Haversine.distance({m.latitude, m.longitude}, {n.latitude, n.longitude}).to_meters\n    end\n  end\nend\n\npoints = [\n  GeoLocation.new(\"New York\", -73.935242, 40.730610),\n  GeoLocation.new(\"Los Angeles\", -118.243683, 34.052235),\n  GeoLocation.new(\"London\", -0.127647, 51.507322),\n  GeoLocation.new(\"Tokyo\", 139.691711, 35.689487),\n]\n\nkd_tree = Kd::Tree(GeoLocation).new(points)\n\n# Find the nearest point to London\ntarget = GeoLocation.new(\"Near London\", -0.125740, 51.508530)\nnearest_point = kd_tree.nearest(target, 1)\nputs \"Nearest to London: #{nearest_point.first.name} (longitude #{nearest_point.first.longitude}, latitude #{nearest_point.first.latitude})\"\n# Nearest to London: London (longitude -0.127647, latitude 51.507322)\n```\n\n## Performance\n\nUsing a tree with 1 million points `[x, y] of Float64` on my Apple M1 Pro (10) @ 3.23 GHz:\n\n`crystal run benchmark/benchmark.cr --release`\n\n```console\nBenchmarking KD-Tree with 1 million points\n                        user     system      total        real\nbuild(init)         1.840140   0.021103   1.861243 (  1.872732)\nnearest point   1   0.004484   0.000002   0.004486 (  0.004490)\nnearest point   5   0.007391   0.000010   0.007401 (  0.007479)\nnearest point  10   0.011406   0.000090   0.011496 (  0.011679)\nnearest point  50   0.034097   0.000819   0.034916 (  0.035175)\nnearest point 100   0.133828   0.003721   0.137549 (  0.156548)\nnearest point 255   0.220200   0.000631   0.220831 (  0.223081)\nnearest point 999   0.731941   0.000441   0.732382 (  0.737236)\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/geocrystal/kd_tree/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [mamantoha](https://github.com/mamantoha) Anton Maminov - creator, maintainer\n","program":{"html_id":"kd_tree/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"kd_tree","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"kd_tree/Kd","path":"Kd.html","kind":"module","full_name":"Kd","name":"Kd","abstract":false,"locations":[{"filename":"src/kd_tree.cr","line_number":4,"url":null},{"filename":"src/kd_tree/version.cr","line_number":1,"url":null}],"repository_name":"kd_tree","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version /__w/kd_tree/kd_tree/src/kd_tree`).chomp.stringify }}"}],"types":[{"html_id":"kd_tree/Kd/Tree","path":"Kd/Tree.html","kind":"class","full_name":"Kd::Tree(T)","name":"Tree","abstract":false,"superclass":{"html_id":"kd_tree/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"kd_tree/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"kd_tree/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/kd_tree.cr","line_number":6,"url":null}],"repository_name":"kd_tree","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"kd_tree/Kd","kind":"module","full_name":"Kd","name":"Kd"},"doc":"A generic KD-tree implementation where `T` is the type of the points.","summary":"<p>A generic KD-tree implementation where <code>T</code> is the type of the points.</p>","constructors":[{"html_id":"new(points:Array(T))-class-method","name":"new","doc":"Constructor for the KD-tree. Takes an array of points of type T and builds the tree.","summary":"<p>Constructor for the KD-tree.</p>","abstract":false,"args":[{"name":"points","external_name":"points","restriction":"Array(T)"}],"args_string":"(points : Array(T))","args_html":"(points : Array(T))","location":{"filename":"src/kd_tree.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"points","external_name":"points","restriction":"Array(T)"}],"visibility":"Public","body":"_ = Tree(T).allocate\n_.initialize(points)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"nearest(target:T,n:Int32=1):Array(T)-instance-method","name":"nearest","doc":"Method to find the nearest 'n' points to a given target point. Returns an array of these points.","summary":"<p>Method to find the nearest 'n' points to a given target point.</p>","abstract":false,"args":[{"name":"target","external_name":"target","restriction":"T"},{"name":"n","default_value":"1","external_name":"n","restriction":"Int32"}],"args_string":"(target : T, n : Int32 = 1) : Array(T)","args_html":"(target : T, n : Int32 = <span class=\"n\">1</span>) : Array(T)","location":{"filename":"src/kd_tree.cr","line_number":46,"url":null},"def":{"name":"nearest","args":[{"name":"target","external_name":"target","restriction":"T"},{"name":"n","default_value":"1","external_name":"n","restriction":"Int32"}],"return_type":"Array(T)","visibility":"Public","body":"if n < 1\n  return [] of T\nend\n\nbest_nodes = Priority::Queue(Node(T)).new\n\nfind_n_nearest(@root, target, 0, best_nodes, n)\n\nbest_nodes.map() do |__arg1| __arg1.value.pivot end\n"},"external_var":false},{"html_id":"root:Node(T)|Nil-instance-method","name":"root","abstract":false,"location":{"filename":"src/kd_tree.cr","line_number":16,"url":null},"def":{"name":"root","return_type":"Node(T) | ::Nil","visibility":"Public","body":"@root"},"external_var":false}],"types":[{"html_id":"kd_tree/Kd/Tree/Node","path":"Kd/Tree/Node.html","kind":"class","full_name":"Kd::Tree::Node(T)","name":"Node","abstract":false,"superclass":{"html_id":"kd_tree/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"kd_tree/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"kd_tree/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/kd_tree.cr","line_number":9,"url":null}],"repository_name":"kd_tree","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"kd_tree/Kd/Tree","kind":"class","full_name":"Kd::Tree(T)","name":"Tree"},"doc":"Represents a node in the KD-tree. Each node stores a pivot point,\nthe axis it splits, and references to its left and right children.","summary":"<p>Represents a node in the KD-tree.</p>","constructors":[{"html_id":"new(pivot:T,split:Int32,left:self|Nil,right:self|Nil)-class-method","name":"new","abstract":false,"args":[{"name":"pivot","external_name":"pivot","restriction":"T"},{"name":"split","external_name":"split","restriction":"Int32"},{"name":"left","external_name":"left","restriction":"self | ::Nil"},{"name":"right","external_name":"right","restriction":"self | ::Nil"}],"args_string":"(pivot : T, split : Int32, left : self | Nil, right : self | Nil)","args_html":"(pivot : T, split : Int32, left : <span class=\"k\">self</span> | Nil, right : <span class=\"k\">self</span> | Nil)","location":{"filename":"src/kd_tree.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"pivot","external_name":"pivot","restriction":"T"},{"name":"split","external_name":"split","restriction":"Int32"},{"name":"left","external_name":"left","restriction":"self | ::Nil"},{"name":"right","external_name":"right","restriction":"self | ::Nil"}],"visibility":"Public","body":"_ = Node(T).allocate\n_.initialize(pivot, split, left, right)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"left:Node(T)|Nil-instance-method","name":"left","abstract":false,"location":{"filename":"src/kd_tree.cr","line_number":10,"url":null},"def":{"name":"left","return_type":"Node(T) | ::Nil","visibility":"Public","body":"@left"},"external_var":false},{"html_id":"pivot:T-instance-method","name":"pivot","abstract":false,"location":{"filename":"src/kd_tree.cr","line_number":10,"url":null},"def":{"name":"pivot","return_type":"T","visibility":"Public","body":"@pivot"},"external_var":false},{"html_id":"right:Node(T)|Nil-instance-method","name":"right","abstract":false,"location":{"filename":"src/kd_tree.cr","line_number":10,"url":null},"def":{"name":"right","return_type":"Node(T) | ::Nil","visibility":"Public","body":"@right"},"external_var":false},{"html_id":"split:Int32-instance-method","name":"split","abstract":false,"location":{"filename":"src/kd_tree.cr","line_number":10,"url":null},"def":{"name":"split","return_type":"Int32","visibility":"Public","body":"@split"},"external_var":false}]}]}]}]}})